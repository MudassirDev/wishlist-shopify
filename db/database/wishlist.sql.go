// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wishlist.sql

package database

import (
	"context"
)

const createWishlistEntry = `-- name: CreateWishlistEntry :one
INSERT INTO wishtlist_entries (
  product_id, customer_id
) VALUES (
  ?, ?
)
RETURNING product_id, customer_id
`

type CreateWishlistEntryParams struct {
	ProductID  int64
	CustomerID int64
}

func (q *Queries) CreateWishlistEntry(ctx context.Context, arg CreateWishlistEntryParams) (WishtlistEntry, error) {
	row := q.db.QueryRowContext(ctx, createWishlistEntry, arg.ProductID, arg.CustomerID)
	var i WishtlistEntry
	err := row.Scan(&i.ProductID, &i.CustomerID)
	return i, err
}

const getWishlistEntries = `-- name: GetWishlistEntries :many
SELECT product_id, customer_id FROM wishtlist_entries WHERE customer_id = ?
`

func (q *Queries) GetWishlistEntries(ctx context.Context, customerID int64) ([]WishtlistEntry, error) {
	rows, err := q.db.QueryContext(ctx, getWishlistEntries, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WishtlistEntry
	for rows.Next() {
		var i WishtlistEntry
		if err := rows.Scan(&i.ProductID, &i.CustomerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
