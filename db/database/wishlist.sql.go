// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wishlist.sql

package database

import (
	"context"
)

const createWishlistEntry = `-- name: CreateWishlistEntry :one
INSERT INTO wishlist_entries (
  product_handle, customer_id
) VALUES (
  ?, ?
)
RETURNING product_handle, customer_id
`

type CreateWishlistEntryParams struct {
	ProductHandle string
	CustomerID    int64
}

func (q *Queries) CreateWishlistEntry(ctx context.Context, arg CreateWishlistEntryParams) (WishlistEntry, error) {
	row := q.db.QueryRowContext(ctx, createWishlistEntry, arg.ProductHandle, arg.CustomerID)
	var i WishlistEntry
	err := row.Scan(&i.ProductHandle, &i.CustomerID)
	return i, err
}

const deleteWishlistEntry = `-- name: DeleteWishlistEntry :exec
DELETE FROM wishlist_entries
WHERE customer_id = ?
AND product_handle = ?
`

type DeleteWishlistEntryParams struct {
	CustomerID    int64
	ProductHandle string
}

func (q *Queries) DeleteWishlistEntry(ctx context.Context, arg DeleteWishlistEntryParams) error {
	_, err := q.db.ExecContext(ctx, deleteWishlistEntry, arg.CustomerID, arg.ProductHandle)
	return err
}

const getWishlistEntries = `-- name: GetWishlistEntries :many
SELECT product_handle, customer_id FROM wishlist_entries WHERE customer_id = ?
`

func (q *Queries) GetWishlistEntries(ctx context.Context, customerID int64) ([]WishlistEntry, error) {
	rows, err := q.db.QueryContext(ctx, getWishlistEntries, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WishlistEntry
	for rows.Next() {
		var i WishlistEntry
		if err := rows.Scan(&i.ProductHandle, &i.CustomerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
